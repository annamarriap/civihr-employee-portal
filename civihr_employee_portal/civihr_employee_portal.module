<?php

/**
 * 
 * 
 * DROP VIEW hrdemocivi_3m49k.absence_list;
CREATE VIEW hrdemocivi_3m49k.absence_list AS
SELECT request.id, request.activity_type_id, absence_type_debit.title as debit_title, absence_type_credit.title as credit_title,
	IF(absence_type_debit.title IS NOT NULL, absence_type_debit.title, absence_type_credit.title) as absence_title,
    CASE absence_type_credit.credit_activity_type_id
        WHEN request.activity_type_id THEN 1
        ELSE 0 END AS is_credit, tgt.contact_id, tgt.record_type_id, min(absence.activity_date_time) as absence_start_date, max(absence.activity_date_time) as absence_end_date, drupal_contact.uf_id as drupal_uid, sum(absence.duration) as duration, request.status_id as absence_status,
UNIX_TIMESTAMP(STR_TO_DATE(min(absence.activity_date_time), '%Y-%m-%d')) as absence_start_date_timestamp,
UNIX_TIMESTAMP(STR_TO_DATE(max(absence.activity_date_time), '%Y-%m-%d')) as absence_end_date_timestamp        
FROM civicrm_activity request 
INNER JOIN civicrm_activity absence ON (absence.source_record_id = request.id AND absence.activity_type_id = 51) 
INNER JOIN civicrm_activity_contact tgt ON tgt.activity_id = request.id AND tgt.record_type_id = 3
LEFT JOIN civicrm_hrabsence_type absence_type_debit
ON request.activity_type_id = absence_type_debit.debit_activity_type_id
LEFT JOIN civicrm_hrabsence_type absence_type_credit
ON request.activity_type_id = absence_type_credit.credit_activity_type_id
INNER JOIN civicrm_uf_match drupal_contact
ON tgt.contact_id = drupal_contact.contact_id
WHERE (request.activity_type_id IN (52, 53, 54, 55, 57, 56, 58)) 
GROUP BY request.id;
 * 
 */

use Drupal\civihr_employee_portal\Blocks\Base;
use Drupal\civihr_employee_portal\Blocks\Leave;

function civihr_employee_portal_init() {
    
    //global $user;
    //print_r($_SESSION['CiviCRM']['userID']); die();
    
}

/**
 * Implements hook_views_default_views().
 */
function civihr_employee_portal_views_default_views() {
  
    // Check for all view files in views directory
    $files = file_scan_directory(drupal_get_path('module', 'civihr_employee_portal') . '/views/views_export', '/.*\.inc$/');

    // Add view to list of views
    foreach ($files as $filepath => $file) {
        require $filepath;
       
        // Check if the view object is set
        if (isset($view)) {
            $views[$view->name] = $view;
        }
    }

    // At the end, return array of default views.
    return $views;
}

/**
 * Function for caching date periods returned from CiviCRM (avoiding expensive DB calls for each dashboard page hit)
 */
function get_civihr_date_periods() {
    
    $periods_data = &drupal_static(__FUNCTION__);
    
    if (!isset($periods_data)) {
        if ($cache = cache_get('civihr_date_periods')) {
            $periods_data = $cache->data;
            watchdog('cache hit', 'cache');
        }
        else {
            
            try {

                // Civi init
                civicrm_initialize();
                
                $res = civicrm_api3('HRAbsencePeriod', 'get', array('options' => array('sort' => "start_date DESC")));
                $periods_data = $res['values'];
                watchdog('DB hit', 'DB');
            
            }

            catch (CiviCRM_API3_Exception $e) {
                $error = $e->getMessage();
            }
            
            // Cache the date periods for 5 minutes
            cache_set('civihr_date_periods', $periods_data, 'cache', time() + 360);
        }   
    }
  
    return $periods_data;
}

/**
 * Function for caching absence types returned from CiviCRM (avoiding expensive DB calls for each dashboard page hit)
 */
function get_civihr_absence_types() {
    
    $absenceTypes = &drupal_static(__FUNCTION__);
    
    if (!isset($absenceTypes)) {
        
        if ($cache = cache_get('civihr_absence_types')) {
            $absenceTypes = $cache->data;
            watchdog('cache hit absence types', 'cache');
        }
        else {
            
            try {
                
                // Civi init
                civicrm_initialize();

                $res = civicrm_api3('HRAbsenceType', 'get', array());
                $absenceTypes = $res['values'];
                watchdog('DB hit absence types', 'DB');

            }

            catch (CiviCRM_API3_Exception $e) {
                $error = $e->getMessage();
            }
            
            // Cache the absence types for 5 minutes
            cache_set('civihr_absence_types', $absenceTypes, 'cache', time() + 360);

        }
    
    }
    
    return $absenceTypes;
    
}

/**
 * Implementation of hook_menu()
 */
function civihr_employee_portal_menu() {
    $items = array();
    $items['absence_entitlement_json'] = array(
        'title' => 'Absence Entitlement',
        'page callback' => 'civihr_employee_portal_get_absence_entitlement',
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
    );
    
    $items['absence_request/%ctools_js/debit'] = array(
        'page callback' => 'civihr_employee_portal_absence_request_callback',
        'page arguments' => array(1, 2),
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
    );
    
    $items['absence_request/%ctools_js/credit'] = array(
        'page callback' => 'civihr_employee_portal_absence_request_callback',
        'page arguments' => array(1, 2),
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
    );
    
    $items['absence_calendar/%ctools_js/show'] = array(
        'page callback' => 'civihr_employee_portal_absence_calendar_callback',
        'page arguments' => array(1),
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
    );

    return $items;
}

/**
* Helper function to make a link.
*/
function civihr_employee_portal_make_link($link_text, $link_type = 'debit') {
    
    // Set a default value if no text in supplied.
    if (empty($link_text)) {
        $link_text = t('Modal');
    }
    
    if ($link_type == 'calendar') {
        return '' . l($link_text, 'absence_calendar/nojs/show', array('attributes' => array('class' => 'ctools-use-modal ctools-modal-civihr-default-style'))) . '';
    }
    
    return '' . l($link_text, 'absence_request/nojs/' . $link_type, array('attributes' => array('class' => 'ctools-use-modal ctools-modal-civihr-default-style'))) . '';
    
}

/**
 * Absence calendar callback
 */
function civihr_employee_portal_absence_calendar_callback($ajax) {
    
    if ($ajax) {
        
        ctools_include('ajax');
        ctools_include('modal');
        
        drupal_add_js('misc/jquery.form.js');
        // Add the responder javascript, required by ctools
        ctools_add_js('ajax-responder');
        
        //ctools_modal_render('test', 'value');
        $output = array();        
        $output[] = ctools_modal_command_display('Calendar view', views_embed_view('calendar_absence_list', 'page_1'));
        
        print ajax_render($output);
        drupal_exit();
    }
    else {
        return '';
    } 
        
}

/**
* Ajax menu callback.
*/
function civihr_employee_portal_absence_request_callback($ajax, $absence_type = 'debit') {
    
    if ($ajax) {
        ctools_include('ajax');
        ctools_include('modal');

        $title = t('Request leave');
        
        if ($absence_type == 'credit') {
            $title = t('Apply for credits');
        }
        
        $form_state = array(
            'ajax' => TRUE,
            'is_ajax_update' => TRUE,
            'title' => $title,
            'absence_type' => $absence_type,
        );
        
        // Since this will run again on form rebuild while still in the modal, prevent
        // form IDs from being incremented.
        // @todo https://drupal.org/node/1305882
        if (!empty($_POST['ajax_html_ids'])) {
            unset($_POST['ajax_html_ids']);
        }
        
        // Use ctools to generate ajax instructions for the browser to create
        // a form in a modal popup.
        $output = ctools_modal_form_wrapper('civihr_employee_portal_absence_request_form', $form_state);

        // If the form has been submitted, there may be additional instructions
        // such as dismissing the modal popup.
        if (!empty($form_state['executed'])) {
            
            drupal_add_js('misc/jquery.form.js');
            // Add the responder javascript, required by ctools
            ctools_add_js('ajax-responder');
            
            $output[] = ajax_command_replace('.messages', 'all good');
            $output[] = ctools_modal_command_dismiss();
            $output[] = ctools_ajax_command_redirect('dashboard');
            
            
            //$output[] = ctools_modal_command_display('Success', 'Something added!');
            //$output[] = array($form_state['values']['new_link_text']);
        }

        // Return the ajax instructions to the browser via ajax_render().
        print ajax_render($output);
        drupal_exit();
    
    }
    
    else {
        return drupal_get_form('civihr_employee_portal_absence_request_form');
    }
    
}

/**
 * Drupal form to be put in a modal.
 */
function civihr_employee_portal_absence_request_form($form, $form_state) {
    
    $absence_type = 'debit';
    
    if (isset($form_state['absence_type']) && $form_state['absence_type'] != '') {
        $absence_type = $form_state['absence_type'];
    }
    
    // Javascript probably disabled - use the value from arg()
    else {
        $absence_type = arg(2);
    }
    
    $absenceTypes = get_civihr_absence_types();
    
    // Absence types select list
    $options = array();
    
    foreach ($absenceTypes as $absenceType) {
            
        // If credit type is allowed show credit types (only if the employee clicked -> apply for credits)
        if ($absenceType['allow_credits'] == '1' && $absence_type == 'credit') {

            // Default credit types
            $options[$absenceType['credit_activity_type_id']] = $absenceType['title'] . ' (Credit)';

        }

        // If debit type is allowed show debit types (only if the employee clicked -> request leave)
        if ($absenceType['allow_debits'] == '1' && $absence_type == 'debit') {

            // Default debit types
            $options[$absenceType['debit_activity_type_id']] = $absenceType['title'];

        }
    }
    
    $form['absence_request_type'] = array(
        '#title' => t('Type:'),
        '#type' => 'select',
        '#options' => $options,
    );
    
    $form['absence_request_date_from'] = array(
        '#title' => t('From:'),
        '#type' => 'date_popup',
        '#required' => 'TRUE',
        '#date_format' => 'Y-m-d',
        '#date_year_range' => '-10:+10',
    );
    
    $form['absence_request_date_to'] = array(
        '#title' => t('To:'),
        '#type' => 'date_popup',
        '#required' => 'TRUE',
        '#ajax' => array(
            'callback'  => 'jms_industry_lens_form_ajax',
            'wrapper'   => 'absence-request-dates-selected',
            'event'   => 'change',
        ),
        '#date_format' => 'Y-m-d',
        '#date_year_range' => '-10:+10',
        '#prefix'   => '<div id="absence-request-from-date-selected">',
        '#suffix'=> '</div>'
    );
    
    $form['absence_request_dates_selected'] = array(
        '#type'     => 'fieldset',
        '#title'    => t('Selected dates'),
        '#markup' => '',
        '#collapsible' => TRUE,
        '#collapsed' => FALSE,
        '#prefix'   => '<div id="absence-request-dates-selected">',
        '#suffix'=> '</div>'
    );
    
    $form['absence_request_dates_selected']['dates_counter'] = array(
        '#type'     => 'hidden',
        '#title' => 'Counter',
        '#default_value' => 'null',
    );
    
    if (isset($form_state['values']['absence_request_date_from'])) {
        
        $from = $form_state['values']['absence_request_date_from'];
        $to = $form_state['values']['absence_request_date_to'];
        $i = 0;
        
        while ($from <= $to) {
             
            $form['absence_request_dates_selected']['_requested_day_' . $i] = array(
                '#type'     => 'select',
                '#title' => $from,
                '#options' => array('480' => t('All day'), '240' => t('Half day')),
            );
            
            $from = strtotime($from);
            $from = $from + (60 * 60 * 24);
            $from = date('Y-m-d', $from);
            
            $i++;
        
        }

    }       
    
    $form['absence_type'] = array(
        '#type' => 'hidden',
        '#value' => $absence_type,
    );
    
    $form['details'] = array(
        '#type' => 'textarea',
        '#title' => t('Details:'),
        '#rows' => 10,
        '#cols' => 100,
    );
    
    $form['#validate'][] = 'civihr_employee_portal_absence_request_form_validate';
    $form['#submit'][] = "civihr_employee_portal_absence_request_form_submit";

    $form['submit'] = array(
        '#type' => 'submit',
        '#value' => t('Submit'),
    );

    return $form;
}

/**
 * Ajax callback to change the rendered industry lens taxonomy term
 */
function jms_industry_lens_form_ajax(&$form, &$form_state) {
    
    $form['absence_request_dates_selected']['#title'] = t('Dates selected:') . ' ' . $form_state['values']['absence_request_date_from'] . " - " . $form_state['values']['absence_request_date_to'];
    
    $from = $form_state['values']['absence_request_date_from'];
    $to = $form_state['values']['absence_request_date_to'];
    $i = 0;
    
    while ($from <= $to) {
             
        $from = strtotime($from);
        $from = $from + (60 * 60 * 24);
        $from = date('Y-m-d', $from);
        
        $i++;
        
    }
    
    $form['absence_request_dates_selected']['dates_counter']['#value'] = $i;
    
    
    return $form['absence_request_dates_selected'];
}

function civihr_employee_portal_absence_request_form_validate($form, &$form_state) {
    
    if (isset($form_state['values']['absence_request_date_from']) && isset($form_state['values']['absence_request_date_to'])) {
        
        if ($form_state['values']['absence_request_date_to'] < $form_state['values']['absence_request_date_from'])
        form_set_error('absence_request_date_to', t('End date must be bigger than the start date!'));
    }
    
    if (isset($form_state['values']['details']) && $form_state['values']['details'] == '') {
        form_set_error('details', t('Please fill in absence details text'));
    }
    
    return TRUE;
}

function civihr_employee_portal_absence_request_form_submit($form, &$form_state) {
    
    global $user;
    
    // Set absence type
    $absence_type = 'debit';
    
    if (isset($form_state['values']['absence_type']) && $form_state['values']['absence_type'] != '') {
        $absence_type = $form_state['values']['absence_type'];
    }
    
    // Set absence details
    $absence_details = '';
    
    if (isset($form_state['values']['details']) && $form_state['values']['details'] != '') {
        $absence_details = $form_state['values']['details'];
    }
    
    // Send the form submitted values
    $form_object = (object) $form_state['values'];
    
    // Fire rules events
    rules_invoke_event('absence_request_add', $user, $absence_type, $absence_details, $form_object);
  
}

function civihr_employee_portal_get_absence_entitlement() {
   
    // Build the query
    $query = db_select('civicrm_hrabsence_entitlement', 'che')
        ->fields('che', array('contact_id', 'period_id'))
        ->fields('cufm', array('uf_id'))
        ->orderBy('che.contact_id');
    
    $query->join('civicrm_uf_match', 'cufm', 'cufm.contact_id = che.contact_id');
    
    // Add the group by
    $query->groupBy('che.contact_id, che.period_id');
    
    // Add the concat
    $query->addExpression("CONCAT_WS('||', GROUP_CONCAT(amount SEPARATOR '@@'), GROUP_CONCAT(type_id SEPARATOR '@@'))", "entitlement_type");
     
    $result = $query->execute();
    
    // Loop and prepare the array
    while($record = $result->fetchAssoc()) {
        $result_output['data'][] = $record;
    }
    
    // Output json
    drupal_json_output($result_output);
    drupal_exit();
}

/**
 * Implements hook_block_info().
 */
function civihr_employee_portal_block_info() {
    
    // Call the Base class
    $blocks = new Base;
    
    // Generate the block and return
    return $blocks->generateBlockInfo();
    
}

/**
 * Implements hook_block_view().
 */
function civihr_employee_portal_block_view($delta = '') {
    
    $blocktypes = Base::returnBlockTypes();
    
    if (array_key_exists($delta, $blocktypes)) {
        $block = array();
        
        $block['subject'] = $blocktypes[$delta]['title'];
        $block['content'] = _civihr_employee_portal_block_generate_content($blocktypes[$delta]['class_name']);
       
        return $block;
    }
    
}

/**
 * Block content generated based on Block class
 */
function _civihr_employee_portal_block_generate_content($class_name = '') {
    
    $class_name = 'Drupal\civihr_employee_portal\Blocks' . '\\' . $class_name;
   
    $block = new $class_name;
    
    return $block->generateBlock(); 
}

/**
 * Implements hook_schema_alter().
 */
function civihr_employee_portal_schema_alter(&$schema) {
    
    $schema['absence_list']['description'] = 'Views data associated with absence_list';
    $schema['absence_list']['fields']['id'] = array(
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => 'Activity ID.',
    );
    $schema['absence_list']['fields']['absence_title'] = array(
        'type' => 'varchar',
        'length' => 200,
        'not null' => TRUE,
        'description' => 'Activity Title.',
    );
    $schema['absence_list']['fields']['drupal_uid'] = array(
        'type' => 'int',
        'not null' => TRUE,
        'description' => 'Drupal User ID.',
    );
    $schema['absence_list']['fields']['duration'] = array(
        'type' => 'int',
        'not null' => TRUE,
        'description' => 'Absence duration.',
    );
    $schema['absence_list']['fields']['activity_type_id'] = array(
        'type' => 'int',
        'not null' => TRUE,
        'description' => 'Absence type ID.',
    );
    $schema['absence_list']['fields']['is_credit'] = array(
        'type' => 'int',
        'not null' => TRUE,
        'description' => 'Absence activity (Is Credit type?)',
    );
    $schema['absence_list']['fields']['absence_start_date_timestamp'] = array(
        'type' => 'varchar',
        'mysql_type' => 'DATETIME',
        'not null' => FALSE,
        'description' => 'Absence start date.',
    );
    $schema['absence_list']['fields']['absence_end_date_timestamp'] = array(
        'type' => 'varchar',
        'mysql_type' => 'DATETIME',
        'not null' => FALSE,
        'description' => 'Absence end date.',
    );
    
    
}

/**
 * Implements hook_entity_info().
 */
function civihr_employee_portal_entity_info() {
    $info = array();
    $info['civihr_absences'] = array(
        'label' => t('Absence entity'),
        'plural label' => t('Absences entity'),
        'description' => t('Absences entity definition.'),
        'entity class' => 'Entity',
        'controller class' => 'EntityAPIController',
        'views controller class' => 'EntityDefaultViewsController',
        'base table' => 'absence_list',
        'fieldable' => TRUE,
        'entity keys' => array(
            'id' => 'id',
            'label' => 'Entity Activity ID'
        ),
        'bundles' => array(),
        // Use the default label() and uri() functions
        'label callback' => 'entity_class_label',
        'uri callback' => 'entity_class_uri',
        // Entity API needs to know about your module for the views integration to work
        'module' => 'civihr_employee_portal',

    );
    
    return $info;
}

/**
 * Implements hook_views_api().
 */
function civihr_employee_portal_views_api() {
    return array(
        'api' => 3,
        'path' => drupal_get_path('module', 'civihr_employee_portal') . '/views',
    );
}